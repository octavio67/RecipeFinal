{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/storage\";\nexport class Recipe {}\nexport let RecipeService = /*#__PURE__*/(() => {\n  class RecipeService {\n    constructor(httpClient, storage) {\n      this.httpClient = httpClient;\n      this.storage = storage;\n      this.endPoint = 'http://localhost:4000/api/recipes';\n      this.AUTH_SERVER_ADDRESS = 'http://localhost:4000';\n    }\n    getOptions(token) {\n      let bearerAccess = 'Bearer ' + token;\n      let options = {\n        headers: {\n          'Authorization': bearerAccess,\n          // 'Content-Type' : 'application/x-www-form-urlencoded',\n          'Content-Type': 'application/json'\n        }\n        //, withCredentials: true\n      };\n\n      return options;\n    }\n    /*createRecipe(recipe, blob, token){\r\n      const formData = new FormData();\r\n      formData.append('name', recipe.name);\r\n      formData.append('category', recipe.category);\r\n      formData.append('file', blob);\r\n          let myOptions = this.getOptions(token);\r\n         // return this.httpClient.post(myOptions, formData);\r\n      return this.httpClient.post(`${this.AUTH_SERVER_ADDRESS}/api/recipes`, myOptions);\r\n    }*/\n    getRecipe(id, token) {\n      let myOptions = this.getOptions(token);\n      //  return this.httpClient.get<Recipe[]>(this.endPoint + '/' + id );\n      return this.httpClient.get(`${this.AUTH_SERVER_ADDRESS}/api/recipes/` + id, myOptions);\n    }\n    getRecipes(token) {\n      let myOptions = this.getOptions(token);\n      console.log(myOptions);\n      return this.httpClient.get(`${this.AUTH_SERVER_ADDRESS}/api/recipes/`, myOptions);\n    }\n    /*deleteRecipe(id) {\r\n      let myOptions = this.getOptions(token);\r\n     // return this.httpClient.delete<Recipe[]>(this.endPoint + '/' + id, this.httpOptions);\r\n      return this.httpClient.delete(`${this.AUTH_SERVER_ADDRESS}/api/recipes/` + id, myOptions);\r\n        }*/\n    /* deleteAllRecipes(): Observable<Recipe[]> {\r\n       return this.httpClient.delete<Recipe[]>(this.endPoint);\r\n     }*/\n    updateRecipe(id, recipe, blob, token) {\n      let myOptions = this.getOptions(token);\n      const formData = new FormData();\n      formData.append('name', recipe.tittle);\n      formData.append('category', recipe.category);\n      formData.append('file', blob);\n      //  return this.httpClient.put(this.endPoint + '/' + id, formData);\n      return this.httpClient.put(`${this.AUTH_SERVER_ADDRESS}/api/recipes/` + id, myOptions).pipe(tap(res => __awaiter(this, void 0, void 0, function* () {\n        if (res.user) {\n          yield this.storage.get(\"token\");\n        }\n      })));\n    }\n  }\n  RecipeService.ɵfac = function RecipeService_Factory(t) {\n    return new (t || RecipeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n  };\n  RecipeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipeService,\n    factory: RecipeService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipeService;\n})();","map":null,"metadata":{},"sourceType":"module"}